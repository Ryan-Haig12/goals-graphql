type Query {
    getUser(id: ID, email: String): User!
    getUserByJWT: User!
    getMultipleUsersById(userIds: [ID]!): [ User! ]
    loginUser(email: String!, password: String!): User!

    getAllGoals: [ AllDefaultGoals ]
    getFinishedGoals(data: GetFinishedGoalsInput): [ FinishedGoal ]

    getGroupMessages(groupId: ID!): [ GroupMessage! ]
    getGroup(groupId: ID!): Group!
    getAllUsersGroups(userId: ID!): [ Group! ]

    getCustomGoal(groupId: ID, creatorId: ID): [ CustomGoal! ]
    getAllCustomGoalsByGroupArray(groupIds: [ID]): [ AllGroupsCustomGoals ]

    calcUserScore(data: CalcUserScoreInput): [ UserScoreReport ]
    calcUserStat(userId: ID!): UserStatReport
    calcGroupPowerRanking(groupId: ID!): GroupPowerRankingReport
    
    ping: String!
}

type Mutation {
    createUser(data: CreateUserInput): User!
    updateUser(data: UpdateUserInput): User!
    deleteUser(id: ID!): User!

    createGoal(data: CreateGoalInput): Goal!
    updateGoal(id: ID!, data: UpdateGoalInput): Goal!
    deleteGoal(id: ID!): Goal!

    createGroup(data: CreateGroupInput): Group!
    updateGroup(data: UpdateGroupInput): Group!
    addUserToGroup(data: AddUserToGroupInput): Group!
    addUserToGroupByEmail(data: AddUserToGroupInput): Group!
    deleteGroup(id: ID!): Group!
    removeUsersFromGroupByUserId(data: RemoveUsersFromGroupInput): Group!

    addFinishedGoal(data: AddFinishedGoalInput): FinishedGoal!

    addGroupMessage(data: AddGroupMessageInput): GroupMessage!

    createCustomGoal(data: CreateCustomGoalInput): CustomGoal!
    deleteCustomGoal(customGoalId: ID!): CustomGoal!
    updateCustomGoal(data: UpdateCustomGoalInput): CustomGoal!
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
    password2: String!
}

input UpdateUserInput {
    userId: ID!
    name: String
    email: String
}

input CreateGoalInput {
    title: String!
    points: Int!
    category: String!
}

input CreateCustomGoalInput {
    title: String!
    points: Int!
    category: String!
    groupId: String!
    customGoalCreator: String!
}

input UpdateCustomGoalInput {
    title: String
    points: Int
    category: String
    groupId: String
    customGoalCreator: String!
}

input UpdateGoalInput {
    title: String
    points: Int
    category: String
}

input CreateGroupInput {
    groupName: String!
}

input UpdateGroupInput {
    groupId: ID!, 
    groupName: String
}

input AddUserToGroupInput {
    groupId: ID!
    newUserId: String
    newUserEmail: String
}

input AddFinishedGoalInput {
    goalId: ID!
    userId: ID!
    groupId: ID!
    timeCompleted: String!
    minutesLogged: Int!
    points: Int!
}

input AddGroupMessageInput {
    message: String!
    authorId: ID!
    groupId: ID!
    timeWritten: String!
}

input GetFinishedGoalsInput {
    userId: ID
    groupId: ID
    goalId: ID
}

input CalcUserScoreInput {
    userIds: [ ID ]!
    groupId: ID!
    startTime: String!
    endTime: String!
}

input RemoveUsersFromGroupInput {
    groupId: ID!
    userIds: [ ID ]!
}

type User {
    id: ID
    name: String
    email: String
    password: String
    dateCreated: String
    errors: [ String ]
    jwt: String
}

type Goal {
    id: ID
    title: String
    points: Int
    category: String
    errors: [ String ]
}

type CustomGoal {
    id: ID
    title: String
    points: Int
    category: String
    errors: [ String ]
    groupId: ID
    customGoalCreator: ID
}

type AllDefaultGoals {
    category: String,
    goals: [ Goal ]
}

type AllGroupsCustomGoals {
    groupId: ID
    customGoals: [ CustomGoal ]
}

type TotalScoreGroup {
    groupId: String
    score: Int
}

type Group {
    id: ID
    groupCreator: ID
    groupName: String
    groupMembers: [ ID ]
    errors: [ String ]
}

type FinishedGoal {
    id: ID
    goalId: ID
    userId: ID
    groupId: ID
    timeCompleted: String
    errors: [ String ]
}

type GroupMessage {
    id: ID
    message: String
    authorId: ID
    groupId: ID
    timeWritten: String
    expirationTime: String
    errors: [ String ]
}

type UserScoreReport {
    userId: ID
    score: Float
    rank: Int
    errors: [ String ]
}

type TimeScoreReport {
    totalTimeLogged: Int
    totalPointsScored: Float
}

type UserStatReport {
    lastFiveFinishedGoals: [ Goal ]
    totalGoalsCompleted: Int
    totalTimeLogged: Int
    totalPointsScored: Float
    favoriteGoal: Goal
    oneWeek: TimeScoreReport
    oneMonth: TimeScoreReport
    threeMonths: TimeScoreReport
    sixMonths: TimeScoreReport
    oneYear: TimeScoreReport
    errors: [ String ]
}

type PowerRankingLog {
    userId: ID
    recordsWon: Int
}

type GroupPowerRankingReport {
    allTimeRankingsWeeks: [ PowerRankingLog ]
    allTimeRankingsMonths: [ PowerRankingLog ]
    errors: [ String ]
}

type Subscription {
    groupMessageSent(groupId: ID!): GroupMessage
}